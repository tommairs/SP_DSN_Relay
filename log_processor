<?php
/****************************/
// Read webhook loglines, build fake DSN, forward
// Assumes the log file "/var/log/bouncelogjson.log" exists and is in the format of JSON log lines
// If not, make adjustments below.
/****************************/
include ('env.php');

// Define log field separator and other vars
  error_reporting(0);
  $f = "data_1";
  $dir    = $logpath ."/data/";
  $logfile = $logpath.'/bouncelogjson.log';
  $markedfiles=[];
  $logarray = [];
  
  
// catalog all files in data folder
// and read each file into data log
  $filelist = scandir($dir);
  $mids = [];
  foreach ($filelist as $f){
    if (substr($f,0,5) == "data_"){
      $timestamp = date('U');
      print "$timestamp: Processing file $f \r\n";
      $filecontents = file_get_contents($dir.$f);
      $data_array = json_decode($filecontents, true);
      extracttologs($data_array,$logdir);
      if (file_exists($dir.$f)){       // then mark the file for deletion
        array_push($markedfiles,$dir.$f);
      }
    }
  }
  foreach($markedfiles as $mf){
     unlink($mf);                       // delete all the processed files
  }
  unset ($mids);
// End of MAIN
/***************************/



function extracttologs($logarray,$logdir){
//  var_dump($logarray);
    foreach($logarray as $num=>$msys){
     foreach($msys as $prime=>$delta){
      foreach($delta as $one=>$two){
        $rm = $two['rcpt_meta'];
        if ($two['rcpt_meta']['creator']){
          $cp = explode("|||",$two['rcpt_meta']['creator']);
          $vctx_sip = $cp[1];
          $vctx_mid = $cp[0];
        }
        if ($two['friendly_from']){
          $from = explode("@",$two['friendly_from']);
          $m = $from[0];
          $M = $from[1];
        }
        if ($two['rcpt_to']){
          $to = explode("@",$two['rcpt_to']);
          $r = $to[0];
          $R = $to[1];
        }
        $t = $two['timestamp'];
        $i = $two['message_id'];
        $g = $two['binding_group'];
        $N = $two['num_retries'];
        $C = $two['bounce_class'];
        $b = $two['binding'];
        $H = $two['ip_address'];
        $s = $two['msg_size'];
        $n = $two['raw_reason'];
        $n = str_replace("\r\n", " ", $n);  //Clean up carriage returns in bounce messages
        if (($i) AND ($eventtype)){
        // Verify we are not writing duplicates
          if (!in_array($eventID,$mids)){
            $mids[] = $eventID;
            // Write out the records
        if ($two['type'] == "out_of_band"){
          $bouncelog .= "".$t."@".$i."@<bid>@<cid>@B@".$r."@".$R."@".$m."@".$M."@".$g."@".$b."@21@".$C."@".$s."@".$H."@".$n."";
        }
        if ($two['type'] == "policy_rejection"){
          $bounceloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$vctx_mid."||".$N."||".$C."||".$n."\r\n";
          $deliveryloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$b."||".$vctx_mid."||".$N."||".$C."||P||".$n."\r\n";
          $splunklog .= "".$t.",".$vctx_sip.",".$m.",".$M.",".$i.",".$r.",".$R.",".$g.",".$b.",".$vctx_mid.",".$N.",".$C.",P,".$n."\r\n";
        }
        if ($two['type'] == "bounce"){
          $bounceloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$vctx_mid."||".$N."||".$C."||".$n."\r\n";
          $deliveryloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$b."||".$vctx_mid."||".$N."||".$C."||P||".$n."\r\n";
          $splunklog .= "".$t.",".$vctx_sip.",".$m.",".$M.",".$i.",".$r.",".$R.",".$g.",".$b.",".$vctx_mid.",".$N.",".$C.",P,".$n."\r\n";
        }
        if ($two['type'] == "delay"){
          $bounceloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$vctx_mid."||".$N."||".$C."||".$n."\r\n";
          $deliveryloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$b."||".$vctx_mid."||".$N."||".$C."||T||".$n."\r\n";
          $splunklog .= "".$t.",".$vctx_sip.",".$m.",".$M.",".$i.",".$r.",".$R.",".$g.",".$b.",".$vctx_mid.",".$N.",".$C.",T,".$n."\r\n";
        }
        if ($two['type'] == "delivery"){
          $deliveryloginband .= "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$b."||".$vctx_mid."||".$N."||".$C."||D||".$n."\r\n";  
          $successinband .=  "".$t."||".$vctx_sip."||".$m."||".$M."||".$i."||".$r."||".$R."||".$g."||".$b."||".$vctx_mid."||".$N."||".$C."||".$n."\r\n";  
          $splunklog .= "".$t.",".$vctx_sip.",".$m.",".$M.",".$i.",".$r.",".$R.",".$g.",".$b.",".$vctx_mid.",".$N.",".$C.",D,".$n."\r\n";
        }
      }
echo "Writing delivery for $eventID\r\n";
            }
          }
        }
      }
    }
  }
      // Write log (create if needed)
      $filelist1 = scandir($logdir);
      if (!$filelist1){
        mkdir($logdir, 0777, true);
        chmod($logdir, 0666);
      }
  $file = "bouncelog.ec";
  $filecontents = $bouncelog;
  file_put_contents($logdir.$file, $filecontents, FILE_APPEND);
  $file = "bouncelog-inband.ec";
  $filecontents = $bounceloginband;
  file_put_contents($logdir.$file, $filecontents, FILE_APPEND);
  $file = "deliverylog-inband.ec";
  $filecontents = $deliveryloginband;
  file_put_contents($logdir.$file, $filecontents, FILE_APPEND);
  $file = "splunklog.ec";
  $filecontents = $splunklog;
  file_put_contents($logdir.$file, $filecontents, FILE_APPEND);
  $file = "success-inband.ec";
  $filecontents = $successinband;
  file_put_contents($logdir.$file, $filecontents, FILE_APPEND);
  chmod($logdir. "/*", 0666);
}
?>






// Read in a logline
$logfile = $logpath.'/bouncelogjson.log';
$lines = file($logfile);

foreach ($lines as $msg => $json_vars){
  /* Get vars */
  $raw_reason = $jsonvars['raw_reason'];
  $rcpt_to = $jsonvars['rcpt_to'];
  $msg_from = $jsonvars['msg_from'];
  $routing_domain = $jsonvars['routing_domain'];
  $ip_address = $jsonvars['ip_address'];
  $msg_timestamp = $jsonvars['timestamp'];
 
  preg_match('/(\d{3}) (\d\.\d\.\d) (.*)/',$raw_reason,$matches);
  // $matches[1] = bounce code
  // $matches[2] = bounce series
  // $matches[3] = bounce reason

  $MailDateStamp =  $date->format( 'D, d M Y H:i:s O', $msg_timestamp);
 
  $msg_body = "
MIME-Version: 1.0
From: $rcpt_to
To: $msg_from
Date: $MailDateStamp
Content-Type: multipart/report; report-type=delivery-status;
	boundary="b2c221ef-446a-4af4-989c-b08ec7fa307c"
Content-Language: en-US
Subject: $subject

--b2c221ef-446a-4af4-989c-b08ec7fa307c
Content-Type: multipart/alternative; differences=Content-Type;
	boundary="37318ef3-03e3-47bd-b9ee-10ff15a0e9e4"

--37318ef3-03e3-47bd-b9ee-10ff15a0e9e4
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

Delivery has failed to these recipients or groups:  

$rcpt_to
$matches[3]


Diagnostic information for administrators:

Generating server: $routing_domain

$rcpt_to
#$raw_reason

Original message headers:

<redacted>

--37318ef3-03e3-47bd-b9ee-10ff15a0e9e4--

--b2c221ef-446a-4af4-989c-b08ec7fa307c
Content-Type: message/delivery-status

Reporting-MTA: dns;$routing_domain
Received-From-MTA: dns;$ip_address
Arrival-Date: $MailDateStamp

Final-Recipient: rfc822;$rcpt_to
Action: failed
Status: $matches[2]
Diagnostic-Code: smtp;$raw_reason


--b2c221ef-446a-4af4-989c-b08ec7fa307c
Content-Type: message/rfc822

<redacted>

--b2c221ef-446a-4af4-989c-b08ec7fa307c--
";

} // end of foreach

$from = $rcpt_to;
$to = $msg_from;
$subject = $subject;
$message = $msg_body;
$headers = array(
    'From' => $from,
    'To' => $to
);

$success = mail($to, $subject, $message, $headers);

if (!$success) {
    $errorMessage = error_get_last()['message'];
    $fp = fopen('bounceforwarderror.log', 'a');
      fwrite($fp, $errorMessage);
    fclose($fp);
}

?>
